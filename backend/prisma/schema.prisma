// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int      @id @default(autoincrement())
    firstName      String   @map("first_name")
    lastName       String   @map("second_name")
    email          String   @unique
    password       String
    dateOfRegister DateTime @default(now()) @map("date_of_register")

    role    Role      @relation(fields: [roleId], references: [id])
    roleId  Int       @map("role_id")
    GoodBuy GoodBuy[]

    @@map("users")
}

model Role {
    id    Int    @id @default(autoincrement())
    title String

    User User[]

    @@map("roles")
}

model Good {
    id          Int     @id @default(autoincrement())
    name        String
    size        String
    weight      String
    price       Int
    discount    Int?
    description String?

    material   GoodMaterial @relation(fields: [materialId], references: [id])
    materialId Int          @map("material_id")

    type      GoodType    @relation(fields: [typeId], references: [id])
    typeId    Int         @map("type_id")
    GoodBuy   GoodBuy[]
    GoodPhoto GoodPhoto[]

    @@map("goods")
}

model GoodMaterial {
    id    Int    @id @default(autoincrement())
    title String
    Good  Good[]

    @@map("good_materials")
}

model GoodType {
    id    Int    @id @default(autoincrement())
    title String
    Good  Good[]

    @@map("good_types")
}

model GoodPhoto {
    id       Int    @id @default(autoincrement())
    imageSrc String

    good   Good @relation(fields: [goodId], references: [id])
    goodId Int  @map("good_id")

    @@map("good_photos")
}

model GoodBuy {
    id     Int   @id @default(autoincrement())
    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @map("user_id")

    good   Good @relation(fields: [goodId], references: [id])
    goodId Int  @map("good_id")

    name  String?
    email String?

    price Int
    count Int

    date DateTime @default(now())

    @@map("good_buys")
}

model IntroSlide {
    id          Int     @id @default(autoincrement())
    title       String
    description String
    bgImageSrc  String  @map("bg_image_src")
    isActive    Boolean @map("is_active")

    @@map("intro_slides")
}

model PhotoAlbum {
    id    Int     @id @default(autoincrement())
    title String
    Photo Photo[]

    @@map("photo_albums")
}

model Photo {
    id       Int    @id @default(autoincrement())
    imageSrc String @map("image_src")

    photoalbum   PhotoAlbum @relation(fields: [photoAlbumId], references: [id])
    photoAlbumId Int        @map("Photo_album_id")

    @@map("photos")
}
